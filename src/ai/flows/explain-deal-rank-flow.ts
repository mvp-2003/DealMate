// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent to explain deal rankings.
 *
 * - explainDealRank - A function that provides an explanation for a deal's ranking.
 * - ExplainDealRankInput - The input type for the explainDealRank function.
 * - ExplainDealRankOutput - The return type for the explainDealRank function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import type { RankedOffer, UserPointsState } from '@/lib/types'; // Assuming types are defined

// Define Zod schemas for input and output based on RankedOffer and UserPointsState
// For simplicity, we'll make them partials or define core fields needed for the prompt.

const ZodRankedOfferSchema = z.object({
  id: z.string(),
  productName: z.string(),
  platform: z.string(),
  basePrice: z.number(),
  finalPrice: z.number(),
  totalDiscountValue: z.number(),
  totalCashbackValue: z.number(),
  cardBonusValue: z.number(),
  potentialPerkValue: z.number(),
  compositeScore: z.number(),
  rankingExplanation: z.array(z.string()),
  achievedPerkDescription: z.string().optional(),
  productUrl: z.string(),
  couponValue: z.number().optional(),
  cashbackPercentage: z.number().optional(),
  cashbackFlat: z.number().optional(),
});


const ExplainDealRankInputSchema = z.object({
  offer: ZodRankedOfferSchema.describe("The ranked offer details for which an explanation is sought."),
  // userContext: ZodUserPointsStateSchema.optional().describe("Optional: The user's current financial context like cards and loyalty points if needed for deeper explanation beyond what's in rankingExplanation."),
});
export type ExplainDealRankInput = z.infer<typeof ExplainDealRankInputSchema>;

const ExplainDealRankOutputSchema = z.object({
  explanation: z.string().describe('The AI-generated explanation for the deal ranking.'),
});
export type ExplainDealRankOutput = z.infer<typeof ExplainDealRankOutputSchema>;

export async function explainDealRank(input: ExplainDealRankInput): Promise<ExplainDealRankOutput> {
  return explainDealRankFlow(input);
}

const prompt = ai.definePrompt({
  name: 'explainDealRankPrompt',
  input: { schema: ExplainDealRankInputSchema },
  output: { schema: ExplainDealRankOutputSchema },
  prompt: `You are ShopSavvy's AI Deal Explainer. A user wants to understand why a particular deal is ranked the way it is.
The deal has a composite score based on various factors including direct discounts, cashback, card-specific bonuses, and the value of any future perks unlocked (like credit card milestone rewards).
The user is NOT asking for general deal advice, but specifically about THIS deal.

Offer Details:
Product: {{{offer.productName}}}
Platform: {{{offer.platform}}}
Base Price: ₹{{{offer.basePrice}}}
Price After Coupon: ₹{{{offer.finalPrice}}} (this is before cashback/card bonuses considered for ranking)
Effective Price (after all discounts, cashback, card bonuses): ₹{{subtract (subtract offer.finalPrice offer.totalCashbackValue) offer.cardBonusValue}}
Composite Score: {{{offer.compositeScore}}} (Higher is better. This score reflects overall value including future perks.)

Key factors contributing to this deal's rank (already calculated):
{{#each offer.rankingExplanation}}
- {{{this}}}
{{/each}}
{{#if offer.achievedPerkDescription}}
- Special Perk: {{{offer.achievedPerkDescription}}} (Value of this perk: ₹{{{offer.potentialPerkValue}}})
{{/if}}

Based on the information above, provide a concise, friendly, and easy-to-understand explanation for why this deal is attractive or why it received its current ranking.
Focus on the most impactful savings. If a future perk is unlocked, highlight its value and how this purchase helps achieve it.
Keep the explanation to 2-3 short paragraphs.
`,
});


// Define a custom Handlebars helper for subtraction
import Handlebars from 'handlebars';
Handlebars.registerHelper('subtract', function(a: number, b: number) {
  return (a - b).toFixed(2);
});


const explainDealRankFlow = ai.defineFlow(
  {
    name: 'explainDealRankFlow',
    inputSchema: ExplainDealRankInputSchema,
    outputSchema: ExplainDealRankOutputSchema,
  },
  async (input) => {
    // The prompt itself uses Handlebars for simple templating.
    // If more complex data manipulation were needed before prompting, it would go here.
    const { output } = await prompt(input);
    if (!output) {
        throw new Error("AI failed to generate an explanation.");
    }
    return output;
  }
);
